/*
 * This source file was generated by the Gradle 'init' task
 */
package com.example.Kursach;

import static com.example.Kursach.MainForm.labelMap;
import java.awt.Color;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JLabel;

public class App {
    
    public static EnergyObject[] energyObjects;
    public static ObjectThread[] threads;
    public static MainForm UI;
    public static double resultingPower;
    public static double consumersPower ;
    
    private static synchronized void setPowerByObJectThread(double value){
        resultingPower += value;
    }
    
    public  synchronized void checkEnergyObjects(String programmName){
        for(EnergyObject object: energyObjects){
            if(object.programmName == programmName){
                try {
                    wait();
                } catch (InterruptedException ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    


    
    public static class EnergyObject{
        
        public String name;
        public double power;
        public String description;
        private String programmName;
        public String programmNameOnMap;
        public int frequency;
        public String type;
        public boolean on = true;
        
        EnergyObject(String name, double power, String programmName, String programmNameOnMap, String type){
            
            this.name = name;
            this.power = power;
            this.description = "<html><h2>"+this.name+"</h2><br>Установленная эл. мощность: "+this.power+" МВт</html>";
            this.programmName = programmName;
            this.frequency = 50;
            this.programmNameOnMap = programmNameOnMap;
            this.type = type;
        }
        
        public synchronized void changeFrequency(int value){
            this.frequency = value;
            UI.labelMap.get(this.programmName).setForeground(Color.RED);
//            UI.labelMap.get(this.programmNameOnMap).setText("");
        }
        
    }
    
    public static class Processor extends Thread{
        
        public Processor(String name){
            super(name);
        }
        
        public void run(){
            int indexOfInterraptedObject;
            while(true){
                try {
                    Thread.sleep(new Random().nextInt(35000 - 20000 + 1000) + 20000);
                    
                    for(int countOfBrokenObjects = 0; countOfBrokenObjects <= new Random().nextInt(3 - 1 + 1) + 1; countOfBrokenObjects++){
                        if((new Random().nextInt(10 - 1 + 1) + 1) % 2 == 0){
                            indexOfInterraptedObject = new Random().nextInt(19 - 1 + 1) + 1;
                            threads[indexOfInterraptedObject].object.changeFrequency(55);
                            threads[indexOfInterraptedObject].setEnergyObjects(false);
                        }
                        else{
                            indexOfInterraptedObject = new Random().nextInt(19 - 1 + 1) + 1;
//                            threads[indexOfInterraptedObject].object.changeFrequency(55);
                            threads[indexOfInterraptedObject].setEnergyObjects(false);
                        }
                    }
                    
                } catch (InterruptedException ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    public static class ObjectThread extends Thread{
        public EnergyObject object;
        public boolean on = true;
        
        public ObjectThread(EnergyObject object){
            super(object.name);
            setPowerByObJectThread(object.power);
            this.object = object;
        }
        
        public synchronized void checkEnergyObjects(){
            if(!object.on){
                System.out.println("object.on = false");
                String PATH = "";
                for(Map.Entry<String, JLabel> entry : labelMap.entrySet()){
                    if(entry.getKey().endsWith("_MAP")){
                        if(object.programmNameOnMap.equals(entry.getKey())){
                            if(object.type.equals("ges"))
                                PATH = "file:///C:/Users/Admin/Documents/NetBeansProjects/Kursach/app/src/main/resources/ges-orange.png";
                            else if(object.type.equals("gres"))
                                PATH = "file:///C:/Users/Admin/Documents/NetBeansProjects/Kursach/app/src/main/resources/gres-orange.png";
                            else if(object.type.equals("ves"))
                                PATH = "file:///C:/Users/Admin/Documents/NetBeansProjects/Kursach/app/src/main/resources/ves-orange.png";
                            entry.getValue().setText("<html><body>"
                                + "<table style='border-collapse: collapse;'>"
                                + "<tr>"
                                + "<td style='vertical-align: middle;'><img src='" + PATH + "' width='30' height='30' /></td>" // Указываем размеры изображения
                                + "<td style='vertical-align: middle; padding-left: 0px;'>"
                                + "<span style='font-size:8px; font-weight:bold;'>P:"+object.power+" MWt</span><br/>" // Первая строка текста
                                + "<span style='font-size:8px;'>f: "+object.frequency+" Hz</span>" // Вторая строка текста
                                + "</td>"
                                + "</tr>"
                                + "</table>"
                                + "</body></html>");
                        } 
                    }
                }
                
                try {
                    wait();
                } catch (InterruptedException ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        public synchronized void setEnergyObjects(boolean value){
            object.on = value;
        }
        
        public synchronized void contitueThread(String name){
            if(object.programmNameOnMap.equals(name) & object.on == false){
                if(object.frequency != 50){
                    UI.labelMap.get(object.programmName).setForeground(Color.BLACK);
                    object.frequency = 50;
                }
                object.on = true;
                String PATH = "";
                for(Map.Entry<String, JLabel> entry : labelMap.entrySet()){
                    if(entry.getKey().endsWith("_MAP")){
                        if(object.programmNameOnMap.equals(entry.getKey())){
                            if(object.type.equals("ges"))
                                PATH = "file:///C:/Users/Admin/Documents/NetBeansProjects/Kursach/app/src/main/resources/ges.png";
                            else if(object.type.equals("gres"))
                                PATH = "file:///C:/Users/Admin/Documents/NetBeansProjects/Kursach/app/src/main/resources/gres.png";
                            else if(object.type.equals("ves"))
                                PATH = "file:///C:/Users/Admin/Documents/NetBeansProjects/Kursach/app/src/main/resources/ves.png";
                            entry.getValue().setText("<html><body>"
                                + "<table style='border-collapse: collapse;'>"
                                + "<tr>"
                                + "<td style='vertical-align: middle;'><img src='" + PATH + "' width='30' height='30' /></td>" // Указываем размеры изображения
                                + "<td style='vertical-align: middle; padding-left: 0px;'>"
                                + "<span style='font-size:8px; font-weight:bold;'>P:"+object.power+" MWt</span><br/>" // Первая строка текста
                                + "<span style='font-size:8px;'>f: "+object.frequency+" Hz</span>" // Вторая строка текста
                                + "</td>"
                                + "</tr>"
                                + "</table>"
                                + "</body></html>");
                        } 
                    }
                }
                notify();
            }
        }
        
        public void run(){
            while(true){
                checkEnergyObjects();
                try {
                    sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }
    
    private static void createEnergyObjects(){
        energyObjects = new EnergyObject[20];
        threads = new ObjectThread[20];
        energyObjects[0] = new EnergyObject("Карламановская ГРЭС",1856.2,"karlamanGRES","karlamanGRES_MAP","gres");
        energyObjects[1] = new EnergyObject("Мечетлинская малая ГЭС",0.445,"mechetlinGES","mechetlinGES_MAP","ges");
        energyObjects[2] = new EnergyObject("Павловская ГЭС",166.4,"pavlovGES","pavlovGES_MAP","ges");
        energyObjects[3] = new EnergyObject("Приуфимская ТЭЦ",210,"priufimCHP","priufimCHP_MAP","gres");
        energyObjects[4] = new EnergyObject("Уфимская ТЭЦ-3",95,"ufimCHP_3","ufimCHP_3_MAP","gres");
        energyObjects[5] = new EnergyObject("ВЭС 'Тюпкильды'",1.65,"tupkilWPP","tupkilWPP_MAP","gres");
        energyObjects[6] = new EnergyObject("Затонская ТЭЦ",440,"zatonCHP","zatonCHP_MAP","gres");
        energyObjects[7] = new EnergyObject("Уфимская ТЭЦ-1",23,"ufimCHP_1","ufimCHP_1_MAP","gres");
        energyObjects[8] = new EnergyObject("Уфимская ТЭЦ-2",519,"ufimCHP_2","ufimCHP_2_MAP","gres");
        energyObjects[9] = new EnergyObject("Уфимская ТЭЦ-4",270,"ufimCHP_4","ufimCHP_4_MAP","gres");
        energyObjects[10] = new EnergyObject("Слакская малая ГЭС",0.1,"slakGES","slakGES_MAP","ges");
        energyObjects[11] = new EnergyObject("Ново-Стерлитамакская ТЭЦ",255,"newsterCHP","newsterCHP_MAP","gres");
        energyObjects[12] = new EnergyObject("Стерлитамакская ТЭЦ",320,"sterCHP","sterCHP_MAP","gres");
        energyObjects[13] = new EnergyObject("МикроГЭС 'Авзян'",0.075,"avzyanGES","avzyanGES_MAP","ges");
        energyObjects[14] = new EnergyObject("МикроГЭС 'Кага'",0.075,"kagaGES","kagaGES_MAP","ges");
        energyObjects[15] = new EnergyObject("МикроГЭС 'Узян'",0.05,"uzanGES","uzanGES_MAP","ges");
        energyObjects[16] = new EnergyObject("Салаватская ТЭЦ",180,"salavatCHP","salavatCHP_MAP","gres");
        energyObjects[17] = new EnergyObject("Зауральская ТЭЦ",17.444,"zauralCHP","zauralCHP_MAP","gres");
        energyObjects[18] = new EnergyObject("ГТЭС 'Сибай'",16,"sibayGCHP","sibayGCHP_MAP","gres");
        energyObjects[19] = new EnergyObject("Юмагузинская ГЭС",45,"umaguzGES","umaguzGES_MAP","ges");
    }

    public static void main(String[] args) {
        createEnergyObjects();
        UI = new MainForm(energyObjects);
        UI.setVisible(true);
        resultingPower = 0;
        for(int i=0; i <= 19; i++){
            threads[i] = new ObjectThread(energyObjects[i]);
            threads[i].start();
        }
        
        Processor processor = new Processor("Процессор");
        processor.start();
        consumersPower = resultingPower - 0.075;
        resultingPower -= 0.075;
    }
}
